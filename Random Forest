import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error, r2_score

# Load dataset
df = pd.read_csv('C:\dataset\insurance.csv')

# Encode categorical columns
df_encoded = df.copy()
label_encoders = {}
categorical_columns = ['sex', 'smoker', 'region']

for column in categorical_columns:
    le = LabelEncoder()
    df_encoded[column] = le.fit_transform(df_encoded[column])
    label_encoders[column] = le

# Define features (numerical + encoded categorical)
features = ['age', 'bmi', 'children', 'sex', 'smoker', 'region']

# Define X (features) and y (target)
X = df_encoded[features]
y = df_encoded['charges']

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the Random Forest Regressor
model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Print results
print("Mean Squared Error:", mse)
print("R-squared Score:", r2)

import matplotlib.pyplot as plt

# Create scatter plots for actual and predicted values separately
plt.figure(figsize=(10, 7))

# Plot actual charges
plt.scatter(range(len(y_test)), y_test, color='blue', label='Actual Charges', alpha=0.6)

# Plot predicted charges
plt.scatter(range(len(y_pred)), y_pred, color='red', label='Predicted Charges', alpha=0.6)

# Labels and title
plt.xlabel('Sample Index')
plt.ylabel('Charges')
plt.title('Actual vs Predicted Charges (Random Forest Regressor)')
plt.legend()
plt.show()
